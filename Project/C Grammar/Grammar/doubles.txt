%verbose
%language "C++"


%{
#include "Grammar.tab.h"
#include <math.h>
extern int yylex(yy::parser::semantic_type *yylval);
extern int a;
extern double b, PI, E;
%}

%union{
	int i;
	float f;
	double d;
}

%start compileUnit
%token <i> NUMBERint
%token <i> VARIABLEint
%token <d> NUMBERdouble
%token <d> VARIABLEdouble
%token <d> DIV MUL ADD SUB EQUALS
%token <d> LOG10 LOG2
%token <d> FLOOR CEIL ABS
%token <d> COS SIN TAN COSH SINH TANH
%token <d> POW SQRT EXPONENTIAL
%token <d> PI E
%right '='
%nonassoc '|'              //nonassoc den mporei na efarmostei se ekfraseis alusidwta p.x. 5+3+2
%nonassoc '^'
%nonassoc '&'
%nonassoc EQ_OP NE_OP
%nonassoc '<' '>'
%left '+' '-' ADD SUB
%left '*' '/' '%' MUL DIV
%type <i> exprInt
%type <d> exprDouble

%%

compileUnit : statements
			;

statements : statement
		   | statements statement
		   ;

statement : exprInt ';' { printf("\nResult: %d",$1); }
		  | exprDouble ';' { printf("\nResult: %.3lf",$1); }
		  | ';'
		  ;

exprInt : NUMBERint { $$ = $1; }
		| VARIABLEint												//praksh me var
		| VARIABLEint '=' exprInt { b = $$ = $3; }				    //anathesh se var
		| '(' exprInt ')' { $$ = $2; }
		| exprInt '+' exprInt { $$ = $1 + $3; }
		| exprInt '-' exprInt { $$ = $1 - $3; }
		| exprInt '*' exprInt { $$ = $1 * $3; }
		| exprInt '/' exprInt { if ($3 == 0) { printf("Cannot divide by zero.\n"); exit(1); } else $$ = $1 / $3; }
		| exprInt '%' exprInt { $$ = $1 % $3; }
		| exprInt '>' exprInt { $$ = $1 > $3; }
		| exprInt '<' exprInt { $$ = $1 < $3; }
		| exprInt '|' exprInt { $$ = $1 | $3; }
		| exprInt '^' exprInt { $$ = $1 ^ $3; }
		| exprInt '&' exprInt { $$ = $1 & $3; }
		| exprInt EQ_OP exprInt { $$ = $1 == $3; }
		| exprInt NE_OP exprInt { $$ = $1 != $3; }
		;

exprDouble : NUMBERdouble { $$ = $1; } 
		   | PI { $$ = 3.142; }
		   | E { $$ = 2.718; }
		   | VARIABLEdouble
		   | VARIABLEdouble EQUALS exprDouble { b = $$ = $3; }	
		   | '(' exprDouble ')' { $$ = $2; }
		   | exprDouble DIV exprDouble { if ($3 == 0) { printf("Cannot divide by zero.\n"); exit(1); } else $$ = $1 / $3; }
		   | exprDouble MUL exprDouble { $$ = $1 * $3; }
		   | exprDouble ADD exprDouble { $$ = $1 + $3; }
		   | exprDouble SUB exprDouble { $$ = $1 - $3; }
		   | exprDouble POW exprDouble { $$ = pow($1, $3); }
		   | exprDouble EQ_OP exprDouble { $$ = $1 == $3; }
		   | exprDouble NE_OP exprDouble { $$ = $1 != $3; }
		   | LOG2 exprDouble { $$ = log2($2); }
		   | LOG10 exprDouble { $$ = log10($2); }
		   | COS exprDouble { $$ = cos($2); }
		   | SIN exprDouble { $$ = sin($2); }
		   | TAN exprDouble { $$ = tan($2); }
		   | COSH exprDouble { $$ = cosh($2); }
		   | SINH exprDouble { $$ = sinh($2); }
		   | TANH exprDouble { $$ = tanh($2); }
		   | SQRT exprDouble  { $$ = sqrt($2); }
		   | EXPONENTIAL exprDouble { $$ = exp($1); }
		   | ABS exprDouble { $$ = abs($2); }
		   | FLOOR exprDouble { $$ = floor($2); }
		   | CEIL exprDouble { $$ = ceil($2); }
		   | exprDouble POW exprDouble { $$ = pow($1,$3); }
		   ;


%%


namespace yy{
	void parser::error (const location_type& loc, const std::string& msg){
		std::cerr << "error at " << loc << ": " << msg << std::endl;
	}
}








%option noyywrap

%{
#include "Grammar.tab.h"
#define YY_DECL int yylex(yy::parser::semantic_type *yylval)
typedef yy::parser::token token;
int a;
double b, PI = 3.142, E = 2.718;
%}


%%

";" {return ';';}
"+" {return '+';}
"-" {return '-';}
"*" {return '*';}
"/" {return '/';}

"%" {return '%';}
"(" {return '(';}
")" {return ')';}
"=" {return '=';}
"<" {return '<';}
">" {return '>';}
"&" {return '&';}
"^" {return '^';}
"|" {return '|';}

"==" {return token::EQ_OP;}
"!=" {return token::NE_OP;}

"log2" {return token::LOG2;}
"log10" {return token::LOG10;}
"cos" {return token::COS;}
"sin" {return token::SIN;}
"tan" {return token::TAN;}
"cosh" {return token::COSH;}
"sinh" {return token::SINH;}
"tanh" {return token::TANH;}
"sqrt" {return token::SQRT;}
"exp" {return token::EXPONENTIAL;}
"abs" {return token::ABS;}
"floor" {return token::FLOOR;}
"ceil" {return token::CEIL;}
"pow" {return token::POW;}
"div" {return token::DIV;}
"mul" {return token::MUL;}
"add" {return token::ADD;}
"sub" {return token::SUB;}
"equals" {return token::EQUALS;}

"0"|[1-9][0-9]* {	yylval->i = atoi(yytext);
					return token::NUMBERint; }

[0-9]+[\.]?[0-9]*|[\.]?[0-9]+ {	yylval->d = atof(yytext);
								return token::NUMBERdouble; }

"a" { yylval->i = a;
	  return token::VARIABLEint; }

"b" { yylval->d = b;
	  return token::VARIABLEdouble; }

"PI" { yylval->d = PI;
	   return token::PI; }

"E" { yylval->d = E;
	  return token::E; }

[ \r\n\t]+ ;

%%




















